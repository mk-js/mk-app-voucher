'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.config = config;
exports.mock = mock;
exports.get = get;
exports.post = post;
exports.test = test;

require('whatwg-fetch');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mockApi = {};
var mockData = {};
var _options = {};

function config(options) {
	(0, _assign2.default)(_options, options);
	if (options.token) {
		setAccessToken(options.token);
	}
}

function mock(url, handler) {
	mockApi[url] = handler;
}

function get(url, headers) {
	before();
	if (_options.mock) {
		return new _promise2.default(function (resolve, reject) {
			setTimeout(function () {
				var resp = mockApi[url](headers);
				resp = after(resp, url, undefined, headers);
				resolve(resp);
			}, 0);
		});
	}

	headers = {
		method: 'GET',
		headers: (0, _extends3.default)({
			'Accept': 'application/json',
			'Content-Type': 'application/json'
		}, headers, {
			token: getAccessToken()
		})

	};

	return new _promise2.default(function (resolve, reject) {
		fetch(url, headers).then(function (response) {
			return response.json();
		}).then(function (responseJson) {
			responseJson = after(responseJson, url, undefined, headers);
			resolve(responseJson);
		}).catch(function (error) {
			return reject(error);
		});
	});
}

function post(url, data, headers) {
	before(url, data, headers);
	if (_options.mock) {
		return new _promise2.default(function (resolve, reject) {
			setTimeout(function () {
				var resp = mockApi[url](data, headers);
				resp = after(resp, url, data, headers);
				resolve(resp);
			}, 0);
		});
	}

	headers = {
		method: 'POST',
		headers: (0, _extends3.default)({
			'Accept': 'application/json',
			'Content-Type': 'application/json'
		}, headers, {
			token: getAccessToken()
		}),
		body: (0, _stringify2.default)(data)
	};

	return new _promise2.default(function (resolve, reject) {
		fetch(url, headers).then(function (response) {
			return response.json();
		}).then(function (responseJson) {
			responseJson = after(responseJson, url, data, headers);
			resolve(responseJson);
		}).catch(function (error) {
			return reject(error);
		});
	});
}

function test(url, data, result) {
	return new _promise2.default(function (resolve, reject) {
		setTimeout(function () {
			resolve(result);
		}, 0);
	});
}

function before(url, data, headers) {
	if (_options.before) {
		_options.before(url, data, headers);
	}
}

function after(response, url, data, headers) {
	if (_options.after) {
		return _options.after(response, url, data, headers);
	}

	return response;
}

function getAccessToken() {
	return sessionStorage['_accessToken'] || '';
}

function setAccessToken(token) {
	sessionStorage['_accessToken'] = token;
}

function clearAccessToken() {
	sessionStorage['_accessToken'] = '';
}

exports.default = {
	config: config,
	fetch: fetch,
	get: get,
	post: post,
	test: test,
	mockData: mockData,
	mock: mock
};